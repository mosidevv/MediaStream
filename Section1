Building a Media Streaming Application
Intro
--Introducing MERN Mediastream
--Uploading videos to MongoDB GridFS
--Storing and retrieving media details
--Streaming videos from GridFS to a basic media player
--Listing, displaying, updating, and deleting media

Lecture 1:
Introducing MERN Mediastream::
--This will be a simple video streaming application that allows registered
users to upload videos that can be streamed by anyone browsing the application.
--We will add new React components to implement views for uploading a new video,
listing already posted media, modifying media post details, and displaying a video
where users can interact with the video content to stream and watch it. We will also
modify existing components such as the Home component so we can render a list of
popular videos and the Profile component so we can list all the videos that are
posted by a given user. These uploading and streaming capabilities in the application
will rely on the user's ability to upload video content.

Lecture 2:
Uploading and storing media::
--Registered users on the MERN Mediastream application will be able to upload videos
from their local files to store each video and related details directly on MongoDB
using GridFS. To enable uploading media content to the application, we need to
define how to store media details and the video content and implement a full-stack
slice that will let users create a new media post and upload a video file

Defining a Media model::
--We will implement a Mongoose model to define a Media model for storing the details
of each piece of media that's posted to the application.

--The Media schema in this model will have fields to record the media title,
description, genre, number of views, dates of when the media was posted and
updated, and a reference to the user who posted the media.

--The fields that were added to the schema definition will only store details about each
video that's posted to the application. In order to store the video content itself, we will
use MongoDB GridFS.

Lecture 3:
Using MongoDB GridFS to store large files::
--In previous chapters, we discussed how files uploaded by users could be stored
directly in MongoDB as binary data; for example, when adding a profile photo.
--But this only worked for files smaller than 16 MB. In order to store larger
files in MongoDB, such as video files needed for this streaming application, we will
need to use GridFS.

--GridFS is a specification in MongoDB that allows us to store large files in MongoDB
by dividing a given file into several chunks. Each chunk can be a maximum of 255 KB
in size, and is stored as a separate document. When the file has to be retrieved in
response to a query to GridFS, the chunks are reassembled as needed. This opens up
the option to fetch and load only parts of the file as required, rather than retrieving
the whole file.

--In the case of storing and retrieving video files for the MERN Mediastream
application, we will utilize GridFS to store video files and stream parts of the video,
depending on which part the user skips to and starts playing from.

--To access and work with MongoDB GridFS from our backend code, we will use
the Node.js MongoDB driver's streaming API by creating a GridFSBucket with the
established database connection.

NB::
--GridFSBucket is the GridFS streaming interface that gives us access
to the streaming GridFS API. It can be used to interact with files in
GridFS.
--we will add a create media form view and an API in the backend, which will use this gridfs
object to save the video file that's uploaded with the request that's sent from the form
view in the frontend.

