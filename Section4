Lecture 1:
Custom media controls::
--We will add custom player control elements below the video rendered in the
MediaPlayer component and manipulate their functionality using the options and
events provided by the ReactPlayer library.

--we will
implement the play, pause, and replay controls; the play next control; the loop
functionality; volume control options; progress control options; fullscreen option, and
also display full duration of the video and the amount that's been played.

Play, pause, and replay::
--Users will be able to play, pause, and replay the current video. We will implement
these three options using Material-UI components bound to ReactPlayer
attributes and events.

--To implement the play, pause, and replay functionality, we will add a play, pause, or
replay icon button conditionally depending on whether the video is playing, is
paused, or has ended.

--The play, pause, or replay icons are rendered in this IconButton based on the
outcome of the ternary operator

Play next::
--Users will be able to play the next video in the related media list using a play next
button, which will render depending on whether the next video is available or not.
--Clicking on this play next button will reload the PlayMedia component with the new
media details and start playing the video.

Loop when a video ends::
--Users will be able to set the current video to keep playing in a loop, using a loop
button. The loop button will render in two states, set and unset.

Lecture 2:
Volume control::
--In order to control the volume of the video being played, users will have the option to
increase or decrease the volume, as well as to mute or unmute. The rendered volume
controls will be updated based on the user action and current value of the volume.

--A volume-up icon will be rendered if the volume is raised
--A volume-off icon will be rendered if the user decreases the volume to zero.
--A volume-mute icon button will be shown if the user clicks the icon to mute the volume

Progress control::
--n the media player, users will see how much of the video has been loaded and
played in a progress bar. To implement this feature, we will use a Material-UI
LinearProgress component to indicate how much of the video has buffered, and
how much has been played already.

--we'll combine this component with an input element of type range to give users the ability to move the time slider to a
different part of the video and play from there.

--The look and color for each progress bar will be determined by the styles you define
for the primaryColor, dashedColorPrimary, and dashed classes.

Lecture 3:
Fullscreen::
--Users will be able to view the video in fullscreen mode by clicking the fullscreen
button in the controls.
--In order to implement a fullscreen option for the video, we will use the screenfull Node module to track when the view is in fullscreen,
and findDOMNode from react-dom to specify which Document Object Model (DOM) element will be made fullscreen with screenfull.

********yarn add screenfull**********

Played duration::
--In the custom media controls section of the media player, we want to show the time
that has already passed and the total duration of the video in a readable time format,

--To show the time, we can utilize the HTML time element, which takes a datetime
value, and add it to the view code in MediaPlayer,

--The controls added to this custom media player are all mostly based on some of the
available functionality provided in the ReactPlayer module, and its examples in the
official documentation.


